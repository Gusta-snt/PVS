(binary_tree_nat
 (height_TCC1 0
  (height_TCC1-1 nil 3956592026 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[BinaryTreeNat])"
     BinaryTreeNat_adt nil))
   nil
   (height termination "binary_tree_nat.height(binary_tree_nat.l)"
           "nil")))
 (height_TCC2 0
  (height_TCC2-1 nil 3956592026 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[BinaryTreeNat])"
     BinaryTreeNat_adt nil))
   nil
   (height termination "binary_tree_nat.height(binary_tree_nat.r)"
           "nil")))
 (height_equal_two 0
  (height_equal_two-1 nil 3956592269 ("" (grind) nil nil)
   ((ex1 const-decl "BinaryTreeNat" binary_tree_nat nil)
    (height def-decl "nat" binary_tree_nat nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil))
   shostak))
 (size_equal_three 0
  (size_equal_three-1 nil 3956592327
   ("" (expand ex1) (("" (grind) nil nil)) nil)
   ((size def-decl "nat" binary_tree_nat nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ex1 const-decl "BinaryTreeNat" binary_tree_nat nil))
   shostak))
 (ex1_inorder 0
  (ex1_inorder-1 nil 3956811173
   ("" (expand ex1)
    (("" (expand inorder)
      (("" (expand inorder)
        (("" (expand inorder)
          (("" (expand append)
            (("" (expand append) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((inorder def-decl "list[nat]" binary_tree_nat nil)
    (append def-decl "list[T]" list_props nil)
    (ex1 const-decl "BinaryTreeNat" binary_tree_nat nil))
   shostak))
 (size_equal_length 0
  (size_equal_length-1 nil 3957382998
   ("" (use BinaryTreeNat_induction)
    (("" (split)
      (("1" (propax) nil nil) ("2" (grind) nil nil)
       ("3" (hide 2)
        (("3" (skolem 1 ("l" "e" "r"))
          (("3" (flatten)
            (("3" (expand "size" 1)
              (("3" (expand "inorder" 1)
                (("3" (replace -1 :hide? t)
                  (("3" (replace -1 :hide? t)
                    (("3" (use "length_append[nat]")
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (BinaryTreeNat type-decl nil BinaryTreeNat_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size def-decl "nat" binary_tree_nat nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (inorder def-decl "list[nat]" binary_tree_nat nil)
    (BinaryTreeNat_induction formula-decl nil BinaryTreeNat_adt nil))
   shostak))
 (mirror_correct 0
  (mirror_correct-1 nil 3957383313
   ("" (induct "t")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("l" "e" "r"))
      (("2" (flatten)
        (("2" (expand "mirror" 1)
          (("2" (expand "reflection?" 1)
            (("2" (expand "inorder" 1)
              (("2" (expand "reflection?" -)
                (("2" (replace -1 :hide? t)
                  (("2" (replace -1 :hide? t)
                    (("2" (use "reverse_append[nat]")
                      (("2" (replace -1 :hide? t)
                        (("2" (expand "reverse" 1 3)
                          (("2" (use "append_append_cons[nat]") nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reverse_append formula-decl nil list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (append_append_cons formula-decl nil more_list_props structures)
    (inorder def-decl "list[nat]" binary_tree_nat nil)
    (reverse def-decl "list[T]" list_props nil)
    (BinaryTreeNat_induction formula-decl nil BinaryTreeNat_adt nil)
    (mirror def-decl "BinaryTreeNat" binary_tree_nat nil)
    (reflection? const-decl "bool" binary_tree_nat nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (BinaryTreeNat type-decl nil BinaryTreeNat_adt nil))
   shostak)))

